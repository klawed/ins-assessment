# billing-service/src/main/resources/application.properties

# Server Configuration
server.port=8082 
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/actuator

# Application Info
spring.application.name=billing-service
info.app.name=Billing Service
info.app.description=Calculates premiums and manages billing cycles.
info.app.version=1.0.0
# Database Configuration
# DB_HOST defaults to 'mariadb' - this matches typical Docker Compose service naming
spring.datasource.url=jdbc:mariadb://${DB_HOST:mariadb}:${DB_PORT:3306}/${DB_NAME:billing_system}?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=${DB_USER:billing_user}
spring.datasource.password=${DB_PASSWORD:billing_password}
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver


# JPA Configuration
# 'validate' is crucial when Flyway is enabled.
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
spring.jpa.properties.hibernate.format_sql=true

# Flyway Configuration
spring.flyway.enabled=${SPRING_FLYWAY_ENABLED:true}
# Each service should have its own migration subfolder if they manage distinct schemas/tables.
# Example: policy-service manages tables like 'policies', 'policy_schedules'
spring.flyway.locations=classpath:db/migration/policy
# spring.flyway.baseline-on-migrate=true
# spring.flyway.baseline-version=1

# Kafka Producer Configuration (for billing.policy.created event)
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Add properties for your shared DTOs if using JSON serializer with types
# spring.kafka.producer.properties.spring.json.add.type.headers=true

# Configuration for services policy-service might call (if any - none obvious from event flow)
# Example if it called billing-service directly (though it seems event-driven)
# app.services.billing.url=http://billing-service:8082/api/billing
policy.service.url=${POLICY_SERVICE_URL:http://localhost:8081}
# Logging Configuration
logging.level.com.insurance.billing=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.flywaydb=INFO 